// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class Service;
@class ChannelClient;
@class NSError;
@protocol ChannelDelegate;

/**
  A Channel is a discreet connection where multiple clients can communicate
  :since: 2.0
*/
SWIFT_CLASS("_TtC9SmartView7Channel")
@interface Channel : NSObject
/**
  The connection status of the channel
*/
@property (nonatomic, readonly) BOOL isConnected;
/**
  The uri of the channel (‘chat’)
*/
@property (nonatomic, readonly, copy) NSString * _Null_unspecified uri;
/**
  the service that is suplaying the channel connection
*/
@property (nonatomic, readonly, strong) Service * _Null_unspecified service;
/**
  The client that owns this channel instance
*/
@property (nonatomic, strong) ChannelClient * _Null_unspecified me;
/**
  The delegate for handling channel events
*/
@property (nonatomic, weak) id <ChannelDelegate> _Nullable delegate;
/**
  The timeout for channel transport connection.
  The connection will be closed if no ping is received within the defined timeout
*/
@property (nonatomic) NSTimeInterval connectionTimeout;
/**
  Connects to the channel. This method will asynchronously call the delegate’s onConnect method and post a
  ChannelEvent.Connect notification upon completion.
  When a TV application connects to this channel, the onReady method/notification is also fired
*/
- (void)connect;
/**
  Connects to the channel. This method will asynchronously call the delegate’s onConnect method and post a
  ChannelEvent.Connect notification upon completion.
  When a TV application connects to this channel, the onReady method/notification is also fired
  \param attributes Any attributes you want to associate with the client (ie. [“name”:“FooBar”])

*/
- (void)connect:(NSDictionary<NSString *, NSString *> * _Nullable)attributes;
/**
  Connects to the channel. This method will asynchronously call the delegate’s onConnect method and post a
  ChannelEvent.Connect notification upon completion.
  When a TV application connects to this channel, the onReady method/notification is also fired
  \param attributes Any attributes you want to associate with the client (ie. [“name”:“FooBar”])

  \param completionHandler The callback handler

*/
- (void)connect:(NSDictionary<NSString *, NSString *> * _Nullable)attributes completionHandler:(void (^ _Nullable)(ChannelClient * _Nullable, NSError * _Nullable))completionHandler;
/**
  Disconnects from the channel. This method will asynchronously call the delegate’s onDisconnect and post a
  ChannelEvent.Disconnect notification upon completion.
  <ul>
    <li>
      client: The client that is disconnecting which is yourself
    </li>
    <li>
      error: An error info if disconnect fails
    </li>
  </ul>
  \param completionHandler The callback handler

*/
- (void)disconnect:(void (^ _Nullable)(ChannelClient * _Nullable, NSError * _Nullable))completionHandler;
/**
  Disconnects from the channel. This method will asynchronously call the delegate’s onDisconnect and post a
  ChannelEvent.Disconnect notification upon completion.
*/
- (void)disconnect;
/**
  Publish an event containing a text message payload
  \param event The event name

  \param message A JSON serializable message object

*/
- (void)publishWithEvent:(NSString * _Nonnull)event message:(id _Nullable)message;
/**
  Publish an event containing a text message and binary payload
  \param event The event name

  \param message A JSON serializable message object

  \param data Any binary data to send with the message

*/
- (void)publishWithEvent:(NSString * _Nonnull)event message:(id _Nullable)message data:(NSData * _Nonnull)data;
/**
  Publish an event with text message payload to one or more targets
  \param event The event name

  \param message A JSON serializable message object

  \param target The target recipient(s) of the message.Can be a string client id, a collection of ids or a string MessageTarget (like MessageTarget.All.rawValue)

*/
- (void)publishWithEvent:(NSString * _Nonnull)event message:(id _Nullable)message target:(id _Nonnull)target;
/**
  Publish an event containing a text message and binary payload to one or more targets
  \param event The event name

  \param message A JSON serializable message object

  \param data Any binary data to send with the message

  \param target The target recipient(s) of the message.Can be a string client id, a collection of ids or a string MessageTarget (like MessageTarget.All.rawValue)

*/
- (void)publishWithEvent:(NSString * _Nonnull)event message:(id _Nullable)message data:(NSData * _Nonnull)data target:(id _Nonnull)target;
/**
  A snapshot of the list of clients currently connected to the channel
*/
- (NSArray<ChannelClient *> * _Nonnull)getClients;
/**
  A convenience method to subscribe for notifications using blocks.
  \param notificationName The name of the notification.

  \param performClosure The notification closure, which will be executed in the main thread.
  Make sure to control the ownership of a variables captured by the closure you provide in this parameter
  (e.g. use [unowned self] or [weak self] to make sure that self is released even if you did not unsubscribe from notification)


  returns:
  An observer handler for removing/unsubscribing the block from notifications
*/
- (id _Nullable)on:(NSString * _Nonnull)notificationName performClosure:(void (^ _Nonnull)(NSNotification * _Null_unspecified))performClosure;
/**
  A convenience method to unsubscribe from notifications
  \param observer The observer object to unregister observations

*/
- (void)off:(id _Nonnull)observer;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  An Application represents an application on the TV device.
  Use this class to control various aspects of the application such as launching the app or getting information
*/
SWIFT_CLASS("_TtC9SmartView11Application")
@interface Application : Channel
/**
  The id of the channel
*/
@property (nonatomic, readonly, copy) NSString * _Null_unspecified id;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable args;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BUNDLE_IDENTIFIER;)
+ (NSString * _Nonnull)BUNDLE_IDENTIFIER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PROPERTY_VALUE_LIBRARY;)
+ (NSString * _Nonnull)PROPERTY_VALUE_LIBRARY;
/**
  Retrieves information about the Application on the TV
  \param completionHandler The callback handler with the status dictionary and an error if any

*/
- (void)getInfo:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/**
  Launches the application on the remote device, if the application is already running it returns success = true.
  If the startOnConnect is set to false this method needs to be called in order to start the application
  \param completionHandler The callback handler

*/
- (void)start:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/**
  Stops the application on the TV
  \param completionHandler The callback handler

*/
- (void)stop:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/**
  Starts the application install on the TV, this method will fail for cloud applications
  \param completionHandler The callback handler

*/
- (void)install:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/**
  MARK: override channel connect
*/
- (void)connect:(NSDictionary<NSString *, NSString *> * _Nullable)attributes completionHandler:(void (^ _Nullable)(ChannelClient * _Nullable, NSError * _Nullable))completionHandler;
/**
  Disconnects your client with the host TV app
  \param leaveHostRunning True leaves the TV app running False stops the TV app if yours is the last client

  \param completionHandler The callback handler

*/
- (void)disconnectWithLeaveHostRunning:(BOOL)leaveHostRunning completionHandler:(void (^ _Nullable)(ChannelClient * _Nullable, NSError * _Nullable))completionHandler;
/**
  Disconnect from the channel and leave the host application running if leaveHostRunning is set to true and you are the last client
  \param leaveHostRunning True leaves the TV app running False stops the TV app if yours is the last client

*/
- (void)disconnectWithLeaveHostRunning:(BOOL)leaveHostRunning;
/**
  Disconnect from the channel and terminate the host application if you are the last client
*/
- (void)disconnect:(void (^ _Nullable)(ChannelClient * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface Application (SWIFT_EXTENSION(SmartView))
@end

@protocol ConnectionDelegate;

SWIFT_CLASS("_TtC9SmartView10BasePlayer")
@interface BasePlayer : NSObject
@property (nonatomic, weak) id <ConnectionDelegate> _Nullable connectionDelegate;
- (void)disconnect:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
/**
  Play last sent media contents.
*/
- (void)play;
/**
  Pause currently playing media.
*/
- (void)pause;
/**
  Stop currently playing media.
*/
- (void)stop;
/**
  Mute the volume of player on a connected device.
*/
- (void)mute;
/**
  UnMute the volume of player on a connected device.
*/
- (void)unMute;
/**
  Request the volume of player on a connected device.
*/
- (void)getVolume;
/**
  Request previous to the player on a connected device.
*/
- (void)previous;
/**
  Request next to the player on a connected device.
*/
- (void)next;
/**
  Set volume on device playing media.
  \param volume Integer value between 0 and 100.

*/
- (void)setVolume:(uint8_t)volume;
/**
  Volume Up.
*/
- (void)volumeUp;
/**
  Volume Down
*/
- (void)volumeDown;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol AudioPlayerDelegate;

SWIFT_CLASS("_TtC9SmartView11AudioPlayer")
@interface AudioPlayer : BasePlayer
@property (nonatomic, weak) id <AudioPlayerDelegate> _Nullable playerDelegate;
- (void)playContent:(NSURL * _Nonnull)contentURL completionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
- (void)playContent:(NSURL * _Nullable)contentURL title:(NSString * _Nonnull)title albumName:(NSString * _Nonnull)albumName albumArtUrl:(NSURL * _Nullable)albumArtUrl completionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
/**
  Seek the given time in currently playing media.
  \param toTime Time in seconds within length of currently playing media.

*/
- (void)seek:(NSTimeInterval)time;
/**
  resumes TV widget/application from background process.
*/
- (void)resumeApplicationInForeground:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
- (void)repeatQueue;
- (void)shuffle;
- (void)getList;
- (void)clearList;
- (void)removeFromList:(NSURL * _Nonnull)contentURL;
- (void)addToList:(NSURL * _Nonnull)contentURL title:(NSString * _Nonnull)title albumName:(NSString * _Nonnull)albumName albumArtUrl:(NSURL * _Nonnull)albumArtUrl;
- (void)addToList:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)arrayDictofData;
- (void)onMessage:(NSNotification * _Null_unspecified)notification;
@end


SWIFT_PROTOCOL("_TtP9SmartView19AudioPlayerDelegate_")
@protocol AudioPlayerDelegate
@optional
- (void)onBufferingStart;
- (void)onBufferingComplete;
- (void)onBufferingProgress:(NSInteger)progress;
- (void)onCurrentPlayTime:(NSInteger)progress;
- (void)onStreamingStarted:(NSInteger)duration;
- (void)onStreamCompleted;
- (void)onPlayerInitialized;
- (void)onPlayerChange:(NSString * _Nonnull)playerType;
- (void)onPlay;
- (void)onPause;
- (void)onStop;
- (void)onMute;
- (void)onUnMute;
- (void)onControlStatus:(NSInteger)volLevel muteStatus:(BOOL)muteStatus shuffleStatus:(BOOL)shuffleStatus mode:(NSString * _Nonnull)mode;
- (void)onVolumeChange:(NSInteger)volLevel;
- (void)onAddToList:(NSDictionary<NSString *, id> * _Nonnull)enqueuedItem;
- (void)onRemoveFromList:(NSDictionary<NSString *, id> * _Nonnull)dequeuedItem;
- (void)onClearList;
- (void)onGetList:(NSDictionary<NSString *, id> * _Nonnull)queueList;
- (void)onShuffle:(BOOL)status;
- (void)onRepeat:(NSString * _Nonnull)mode;
- (void)onCurrentPlaying:(NSDictionary<NSString *, id> * _Nonnull)currentItem;
- (void)onApplicationSuspend;
- (void)onApplicationResume;
- (void)onError:(NSError * _Nonnull)error;
@end




@interface Channel (SWIFT_EXTENSION(SmartView))
@end


@interface Channel (SWIFT_EXTENSION(SmartView))
@end


@interface Channel (SWIFT_EXTENSION(SmartView))
@end


/**
  A client currently connected to the channel
*/
SWIFT_CLASS("_TtC9SmartView13ChannelClient")
@interface ChannelClient : NSObject
/**
  The id of the client
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/**
  The time which the client connected in epoch milliseconds
*/
@property (nonatomic, readonly, copy) NSDate * _Nullable connectTime;
/**
  A dictionary of attributes passed by the client when connecting
*/
@property (nonatomic, readonly, strong) id _Nullable attributes;
/**
  Flag for determining if the client is the host
*/
@property (nonatomic, readonly) BOOL isHost;
/**
  The description of the client
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class Message;

/**
  The channel delegate protocol defines the event methods available for a channel
*/
SWIFT_PROTOCOL("_TtP9SmartView15ChannelDelegate_")
@protocol ChannelDelegate
@optional
/**
  Called when the Channel is connected
  \param client The Client that just connected to the Channel

  \param error An error info if any

*/
- (void)onConnect:(ChannelClient * _Nullable)client error:(NSError * _Nullable)error;
/**
  Called when the host app is ready to send or receive messages
*/
- (void)onReady;
/**
  Called when the Channel is disconnected
  \param client The Client that just disconnected from the Channel

  \param error An error info if any

*/
- (void)onDisconnect:(ChannelClient * _Nullable)client error:(NSError * _Nullable)error;
/**
  Called when the Channel receives a text message
  \param message Text message received

*/
- (void)onMessage:(Message * _Nonnull)message;
/**
  Called when the Channel receives a binary data message
  \param message Text message received

  \param payload Binary payload data

*/
- (void)onData:(Message * _Nonnull)message payload:(NSData * _Nonnull)payload;
/**
  Called when a client connects to the Channel
  \param client The Client that just connected to the Channel

*/
- (void)onClientConnect:(ChannelClient * _Nonnull)client;
/**
  Called when a client disconnects from the Channel
  \param client The Client that just disconnected from the Channel

*/
- (void)onClientDisconnect:(ChannelClient * _Nonnull)client;
/**
  Called when a Channel Error is fired
  \param error The error

*/
- (void)onError:(NSError * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP9SmartView18ConnectionDelegate_")
@protocol ConnectionDelegate
@optional
- (void)onConnect:(NSError * _Nullable)error;
- (void)onDisconnect:(NSError * _Nullable)error;
/**
  Called when media player on target device sends “playerNotice” event to client.
  It may be change of playback status, error message or informative event about video stream state.
  See MediaPlayer.PlayerNotice definition for possible values.
*/
- (void)onPlayerNotice:(NSDictionary<NSString *, id> * _Nonnull)messageData;
@end


SWIFT_CLASS("_TtC9SmartView11MediaPlayer")
@interface MediaPlayer : NSObject
@property (nonatomic, readonly, strong) Service * _Nonnull service;
@property (nonatomic, readonly) BOOL connected;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface MediaPlayer (SWIFT_EXTENSION(SmartView)) <ChannelDelegate>
- (void)onMessage:(Message * _Nonnull)message;
- (void)onConnect:(ChannelClient * _Nullable)client error:(NSError * _Nullable)error;
- (void)onDisconnect:(ChannelClient * _Nullable)client error:(NSError * _Nullable)error;
@end


/**
  This class encapsulates the message that
*/
SWIFT_CLASS("_TtC9SmartView7Message")
@interface Message : NSObject
/**
  The event name
*/
@property (nonatomic, readonly, copy) NSString * _Null_unspecified event;
/**
  The publisher of the event
*/
@property (nonatomic, readonly, copy) NSString * _Null_unspecified from;
/**
  A dictionary containig the message
*/
@property (nonatomic, readonly, strong) id _Nullable data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol PhotoPlayerDelegate;

SWIFT_CLASS("_TtC9SmartView11PhotoPlayer")
@interface PhotoPlayer : BasePlayer
@property (nonatomic, weak) id <PhotoPlayerDelegate> _Nullable playerDelegate;
- (void)playContent:(NSURL * _Nonnull)contentURL completionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
- (void)playContent:(NSURL * _Nullable)contentURL title:(NSString * _Nonnull)title completionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
/**
  <ul>
    <li>
      sets slide show timeout period
    </li>
    <li>
      @param slideTimeout slide show time-out period in milliseconds.
    </li>
  </ul>
*/
- (void)setSlideTimeout:(NSTimeInterval)time;
/**
  <ul>
    <li>
      sets background audio in slide show.
    </li>
    <li>
      @param NSURL Background audio contentURL.
    </li>
  </ul>
*/
- (void)setBackgroundMusic:(NSURL * _Nonnull)contentURL;
/**
  <ul>
    <li>
      stops background audio in slide show.
    </li>
  </ul>
*/
- (void)stopBackgroundMusic;
/**
  resumes TV widget/application from background process.
*/
- (void)resumeApplicationInForeground:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
- (void)getList;
- (void)clearList;
- (void)removeFromList:(NSURL * _Nonnull)contentURL;
- (void)addToList:(NSURL * _Nonnull)contentURL title:(NSString * _Nonnull)title albumName:(NSString * _Nonnull)albumName albumArtUrl:(NSURL * _Nonnull)albumArtUrl;
- (void)addToList:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)arrayDictofData;
- (void)onMessage:(NSNotification * _Null_unspecified)notification;
@end


SWIFT_PROTOCOL("_TtP9SmartView19PhotoPlayerDelegate_")
@protocol PhotoPlayerDelegate
@optional
- (void)onPlayerInitialized;
- (void)onPlayerChange:(NSString * _Nonnull)playerType;
- (void)onPlay;
- (void)onPause;
- (void)onStop;
- (void)onMute;
- (void)onUnMute;
- (void)onControlStatus:(NSInteger)volLevel muteStatus:(BOOL)muteStatus;
- (void)onVolumeChange:(NSInteger)volLevel;
- (void)onAddToList:(NSDictionary<NSString *, id> * _Nonnull)enqueuedItem;
- (void)onRemoveFromList:(NSDictionary<NSString *, id> * _Nonnull)dequeuedItem;
- (void)onClearList;
- (void)onGetList:(NSDictionary<NSString *, id> * _Nonnull)queueList;
- (void)onCurrentPlaying:(NSDictionary<NSString *, id> * _Nonnull)currentItem;
- (void)onApplicationSuspend;
- (void)onApplicationResume;
- (void)onError:(NSError * _Nonnull)error;
@end

enum ServiceSearchDiscoveryType : NSInteger;
@class VideoPlayer;
@class ServiceSearch;

/**
  A Service instance represents the multiscreen service root on the remote device
  Use the class to control top level services of the device
*/
SWIFT_CLASS("_TtC9SmartView7Service")
@interface Service : NSObject
@property (nonatomic, readonly) enum ServiceSearchDiscoveryType discoveryType;
/**
  The id of the service
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/**
  The uri of the service (http://<ip>:<port>/api/v2/)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull uri;
/**
  The name of the service (Living Room TV)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**
  The version of the service (x.x.x)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/**
  The type of the service (Samsung SmartTV)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/**
  The service description
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  This asynchronously method retrieves a dictionary of additional information about the device the service is running on
  \param timeout timeout

  \param completionHandler A block to handle the response dictionary
  <ul>
    <li>
      deviceInfo: The device info dictionary
    </li>
    <li>
      error: An error info if getDeviceInfo failed
    </li>
  </ul>

*/
- (void)getDeviceInfo:(NSInteger)timeout completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/**
  Creates an application instance belonging to that service
  <ul>
    <li>
      For an installed application this is the string id as provided by Samsung, If your TV app is still in development, you can use the folder name of your app as the id. Once the TV app has been released into Samsung Apps, you must use the supplied app id.`
    </li>
    <li>
      For a cloud application this is the application’s URL
    </li>
  </ul>
  \param id The id of the application

  \param channelURI The uri of the Channel (“com.samsung.multiscreen.helloworld”)

  \param args A dictionary of command line aruguments to be passed to the Host TV App


  returns:
  An Application instance or nil if application id or channel id is empty
*/
- (Application * _Nullable)createApplication:(id _Nonnull)id channelURI:(NSString * _Nonnull)channelURI args:(NSDictionary<NSString *, id> * _Nullable)args;
/**
  Creates a channel instance belonging to that service (“mychannel”)
  <ul>
    <li>
      `: The uri of the Channel (“com.samsung.multiscreen.helloworld”)
    </li>
  </ul>

  returns:
  A Channel instance
*/
- (Channel * _Nonnull)createChannel:(NSString * _Nonnull)channelURI;
- (VideoPlayer * _Nonnull)createVideoPlayer:(NSString * _Nonnull)appName;
- (AudioPlayer * _Nonnull)createAudioPlayer:(NSString * _Nonnull)appName;
- (PhotoPlayer * _Nonnull)createPhotoPlayer:(NSString * _Nonnull)appName;
/**
  Creates a service search object

  returns:
  An instance of ServiceSearch
*/
+ (ServiceSearch * _Nonnull)search;
/**
  This asynchronous method retrieves a service instance given a service URI
  <ul>
    <li>
      service: The service instance
    </li>
    <li>
      timeout: The timeout for the request
    </li>
    <li>
      error: An error info if getByURI fails
    </li>
  </ul>
  \param uri The uri of the service

  \param completionHandler The completion handler with the service instance or an error

*/
+ (void)getByURI:(NSString * _Nonnull)uri timeout:(NSTimeInterval)timeout completionHandler:(void (^ _Nonnull)(Service * _Nullable, NSError * _Nullable))completionHandler;
/**
  This asynchronous method retrieves a service instance given a service id
  <ul>
    <li>
      service: The service instance
    </li>
    <li>
      error: An error info if getById fails
    </li>
  </ul>
  \param id The id of the service

  \param completionHandler The completion handler with the service instance or an error

*/
+ (void)getById:(NSString * _Nonnull)id completionHandler:(void (^ _Nonnull)(Service * _Nullable, NSError * _Nullable))completionHandler;
/**
  Send a packet for WakeOnWirelessLan.
  <ul>
    <li>
      param macAddr: Mac Address of TV
    </li>
  </ul>
*/
+ (void)WakeOnWirelessLan:(NSString * _Nonnull)macAddr;
/**
  Send a packet via WakeOnWirelessLan and create and connect to particular appilcation
  <ul>
    <li>
      param macAddr: Mac Address of TV
    </li>
    <li>
      param uri: The uri of service
    </li>
    <li>
      service: The service instance
    </li>
    <li>
      error: An error info if getByURI fails
    </li>
  </ul>
*/
+ (void)WakeOnWirelessAndConnect:(NSString * _Nonnull)macAddr uri:(NSString * _Nonnull)uri completionHandler:(void (^ _Nonnull)(Service * _Nullable, NSError * _Nullable))completionHandler;
/**
  Send a packet via WakeOnWirelessLan and create and connect to particular appilcation
  <ul>
    <li>
      param macAddr: Mac Address of TV
    </li>
    <li>
      param uri: The uri of service
    </li>
    <li>
      timeOut: timeout to wakeup
    </li>
    <li>
      service: The service instance
    </li>
    <li>
      error: An error info if getByURI fails
    </li>
  </ul>
*/
+ (void)WakeOnWirelessAndConnect:(NSString * _Nonnull)macAddr uri:(NSString * _Nonnull)uri timeOut:(NSTimeInterval)timeOut completionHandler:(void (^ _Nonnull)(Service * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol ServiceSearchDelegate;

/**
  This class searches the local network for compatible multiscreen services
*/
SWIFT_CLASS("_TtC9SmartView13ServiceSearch")
@interface ServiceSearch : NSObject
/**
  Set a delegate to receive search events.
*/
@property (nonatomic, weak) id <ServiceSearchDelegate> _Nullable delegate;
/**
  The search status
*/
@property (nonatomic, readonly) BOOL isSearching;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (NSArray<Service *> * _Nonnull)getServices;
/**
  A convenience method to suscribe for notifications using blocks
  \param notificationName The name of the notification

  \param performClosure The notification block, this block will be executed in the main thread


  returns:
  An observer handler for removing/unsubscribing the block from notifications
*/
- (id _Nonnull)on:(NSString * _Nonnull)notificationName performClosure:(void (^ _Nonnull)(NSNotification * _Null_unspecified))performClosure;
/**
  A convenience method to unsuscribe from notifications
  \param observer The observer object to unregister observations

*/
- (void)off:(id _Nonnull)observer;
/**
  Start the search
*/
- (void)start;
- (BOOL)isSearchingBLE;
/**
  Start BLE Search Process
*/
- (BOOL)startUsingBLE;
/**
  Stop BLE Search Process
*/
- (BOOL)stopUsingBLE;
/**
  Stops the search
*/
- (void)stop;
@end


@interface ServiceSearch (SWIFT_EXTENSION(SmartView))
@end


@interface ServiceSearch (SWIFT_EXTENSION(SmartView))
@end


/**
  This protocol defines the methods for ServiceSearch discovery
*/
SWIFT_PROTOCOL("_TtP9SmartView21ServiceSearchDelegate_")
@protocol ServiceSearchDelegate
@optional
/**
  The ServiceSearch will call this delegate method when a service is found
  \param service The found service

*/
- (void)onServiceFound:(Service * _Nonnull)service;
/**
  The ServiceSearch will call this delegate method when a service is lost
  \param service The lost service

*/
- (void)onServiceLost:(Service * _Nonnull)service;
/**
  The ServiceSearch will call this delegate method after stopping the search
*/
- (void)onStop;
/**
  The ServiceSearch will call this delegate method after the search has started
*/
- (void)onStart;
/**
  If BLE device is found
*/
- (void)onFoundOnlyBLE:(NSString * _Nonnull)NameOfTV;
/**
  Find other network (other than BLE)
*/
- (void)onFoundOtherNetwork:(NSString * _Nonnull)NameOfTV;
@end

typedef SWIFT_ENUM(NSInteger, ServiceSearchDiscoveryType) {
  ServiceSearchDiscoveryTypeLAN = 0,
  ServiceSearchDiscoveryTypeCLOUD = 1,
};

@protocol VideoPlayerDelegate;

SWIFT_CLASS("_TtC9SmartView11VideoPlayer")
@interface VideoPlayer : BasePlayer
@property (nonatomic, weak) id <VideoPlayerDelegate> _Nullable playerDelegate;
- (void)playContent:(NSURL * _Nonnull)contentURL completionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
- (void)playContent:(NSURL * _Nullable)contentURL title:(NSString * _Nonnull)title thumbnailURL:(NSURL * _Nullable)thumbnailURL completionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
- (void)forward;
- (void)rewind;
/**
  Seek the given time in currently playing media.
  \param toTime Time in seconds within length of currently playing media.

*/
- (void)seek:(NSTimeInterval)time;
- (void)repeatQueue;
/**
  resumes TV widget/application from background process.
*/
- (void)resumeApplicationInForeground:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
- (void)getList;
- (void)clearList;
- (void)removeFromList:(NSURL * _Nonnull)contentURL;
- (void)addToList:(NSURL * _Nonnull)contentURL title:(NSString * _Nonnull)title thumbnailURL:(NSURL * _Nonnull)thumbnailURL;
- (void)addToList:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)arrayDictofData;
- (void)onMessage:(NSNotification * _Null_unspecified)notification;
@end


SWIFT_PROTOCOL("_TtP9SmartView19VideoPlayerDelegate_")
@protocol VideoPlayerDelegate
@optional
- (void)onBufferingStart;
- (void)onBufferingComplete;
- (void)onBufferingProgress:(NSInteger)progress;
- (void)onCurrentPlayTime:(NSInteger)progress;
- (void)onStreamingStarted:(NSInteger)duration;
- (void)onStreamCompleted;
- (void)onPlayerInitialized;
- (void)onPlayerChange:(NSString * _Nonnull)playerType;
- (void)onPlay;
- (void)onPause;
- (void)onStop;
- (void)onForward;
- (void)onRewind;
- (void)onMute;
- (void)onUnMute;
- (void)onControlStatus:(NSInteger)volLevel muteStatus:(BOOL)muteStatus mode:(NSString * _Nonnull)mode;
- (void)onVolumeChange:(NSInteger)volLevel;
- (void)onAddToList:(NSDictionary<NSString *, id> * _Nonnull)enqueuedItem;
- (void)onRemoveFromList:(NSDictionary<NSString *, id> * _Nonnull)dequeuedItem;
- (void)onClearList;
- (void)onGetList:(NSDictionary<NSString *, id> * _Nonnull)queueList;
- (void)onRepeat:(NSString * _Nonnull)mode;
- (void)onCurrentPlaying:(NSDictionary<NSString *, id> * _Nonnull)currentItem;
- (void)onApplicationSuspend;
- (void)onApplicationResume;
- (void)onError:(NSError * _Nonnull)error;
@end

@class OS_dispatch_queue;
@class NSStream;

SWIFT_CLASS("_TtC9SmartView9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain;
@property (nonatomic, strong) OS_dispatch_queue * _Nonnull callbackQueue;
@property (nonatomic, copy) void (^ _Nullable onConnect)(void);
@property (nonatomic, copy) void (^ _Nullable onDisconnect)(NSError * _Nullable);
@property (nonatomic, copy) void (^ _Nullable onText)(NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onData)(NSData * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onPong)(NSData * _Nullable);
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
@property (nonatomic) BOOL voipEnabled;
@property (nonatomic) BOOL disableSSLCertValidation;
@property (nonatomic, copy) NSString * _Nullable origin;
@property (nonatomic) NSInteger timeout;
@property (nonatomic, readonly) BOOL isConnected;
@property (nonatomic, readonly, copy) NSURL * _Nonnull currentURL;
/**
  Used for setting protocols.
*/
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url protocols:(NSArray<NSString *> * _Nullable)protocols OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url writeQueueQOS:(enum NSQualityOfService)writeQueueQOS protocols:(NSArray<NSString *> * _Nullable)protocols;
/**
  Connect to the WebSocket server on a background thread.
*/
- (void)connect;
/**
  Write a string to the websocket. This sends it as a text frame.
  If you supply a non-nil completion block, I will perform it when the write completes.
  \param str The string to write.

  \param completion The (optional) completion handler.

*/
- (void)writeWithString:(NSString * _Nonnull)string completion:(void (^ _Nullable)(void))completion;
/**
  Write binary data to the websocket. This sends it as a binary frame.
  If you supply a non-nil completion block, I will perform it when the write completes.
  \param data The data to write.

  \param completion The (optional) completion handler.

*/
- (void)writeWithData:(NSData * _Nonnull)data completion:(void (^ _Nullable)(void))completion;
/**
  Write a ping to the websocket. This sends it as a control frame.
  Yodel a   sound  to the planet.    This sends it as an astroid. http://youtu.be/Eu5ZJELRiJ8?t=42s
*/
- (void)writeWithPing:(NSData * _Nonnull)ping completion:(void (^ _Nullable)(void))completion;
/**
  Delegate for the stream methods. Processes incoming bytes
*/
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
